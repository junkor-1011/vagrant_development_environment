# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "ubuntu/focal64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #

  # x11
  config.ssh.forward_x11 = true

  config.vm.provider "virtualbox" do |vb|
    # Display the VirtualBox GUI when booting the machine
    vb.gui = true

    # Customize the amount of memory on the VM:
    vb.memory = "3072"
    
    vb.cpus = 2
    vb.customize [
      "modifyvm", :id,
      "--vram", "256",
      "--clipboard", "bidirectional",
      "--draganddrop", "bidirectional",
      "--accelerate3d", "on",
      "--hwvirtex", "on",
      "--nestedpaging", "on",
      "--largepages", "on",
      "--ioapic", "on",
      "--pae", "on",
      "--paravirtprovider", "kvm",
    ]
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
  config.vm.provision :root_user1, privileged: true, type: "shell", inline: <<-SHELL
    set -eux
    apt-get update
    apt-get install -y git curl wget bash
  SHELL

  # clone repositories
  config.vm.provision :vagrant_user1, privileged: false, type: "shell", inline: <<-SHELL
    set -eux

    # dotfiles
    git clone https://github.com/junkor-1011/confs_linux.git ${HOME}/.dotfiles
    # deploy
    ${HOME}/.dotfiles/deploy.sh

    # setting scripts
    git clone https://github.com/junkor-1011/linux_setting_environments.git ${HOME}/.__SETTING__
  SHELL

  # install
  config.vm.provision :root_user2, privileged: true, type: "shell", inline: <<-SHELL
    set -eux

    # core
    /home/vagrant/.__SETTING__/root/core_package_manager/ubuntu/install.sh
    # github
    /home/vagrant/.__SETTING__/root/core_package_manager/ubuntu/additional/install_gh.sh
    # docker
    /home/vagrant/.__SETTING__/root/docker/ubuntu/install.sh
    /home/vagrant/.__SETTING__/root/docker/ubuntu/groupadd_docker.sh
    # login shell (zsh)
    /home/vagrant/.__SETTING__/root/login_shell/vagrant_login_shell.sh
    # desktop
    /home/vagrant/.__SETTING__/root/core_package_manager/ubuntu/additional/install_ubuntu_desktop.sh
    /home/vagrant/.__SETTING__/root/core_package_manager/ubuntu/additional/install_ubuntu_ja.sh

  SHELL

  config.vm.provision :vagrant_user2, privileged: false, type: "shell", inline: <<-SHELL
    set -eux

    # neovim
    /home/vagrant/.__SETTING__/user/neovim/install.sh
    /home/vagrant/.__SETTING__/user/dein/install.sh
    # fzf
    /home/vagrant/.__SETTING__/user/fzf/install.sh
    # anyenv
    /home/vagrant/.__SETTING__/user/anyenv/install.sh
    # post_install: execute manually
    # /home/vagrant/.__SETTING__/user/anyenv/post_install.sh
    # zsh-zinit
    /home/vagrant/.__SETTING__/user/zinit/install.sh
    cd $HOME/.dotfiles; git stash; cd -
    # fish-fisher
    /home/vagrant/.__SETTING__/user/fisher/install.sh
    # aws-cli(ver2)
    /home/vagrant/.__SETTING__/user/awscli2/install.sh
    # terraform
    /home/vagrant/.__SETTING__/user/terraform/install.sh
    # GUI keyboard layout
    setxkbmap -layout jp
    # /home/vagrant/.__SETTING__/user/setxkbmap/set_keyboard_layout_jp.sh

    # ToDo: font-install(IPA-Font, Nerd-Font)

    cd $HOME
    
  SHELL

  # finish & cleanup
  config.vm.provision :root_user3, privileged: true, type: "shell", inline: <<-SHELL
    set -eux

    apt-get -y upgrade
    apt-get -y autoremove
    apt-get clean
    # rm -rf /var/lib/apt/lists/*
    echo "Done cleanup."
  SHELL
end
